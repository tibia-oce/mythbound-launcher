name: Build & Release

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build-windows:
    name: Build Windows Launcher
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: |
          cd mythbound-launcher
          npm ci

      - name: Build Windows Launcher (NSIS-Web)
        run: |
          cd mythbound-launcher
          npm run build-windows

      - name: Debug Windows Build Output
        shell: pwsh
        run: |
          echo "Contents of dist directory:"
          Get-ChildItem -Path "mythbound-launcher/dist" -Recurse | Format-Table Name, Length, LastWriteTime

          echo "Checking for NSIS-Web critical files:"

          # Check for latest.yml
          if (Test-Path "mythbound-launcher/dist/latest.yml") {
            echo "✅ latest.yml found"
            echo "Content:"
            Get-Content "mythbound-launcher/dist/latest.yml"
          } else {
            echo "❌ latest.yml NOT found"
          }

          # Check for .7z package files (these are critical for differential updates)
          $sevenZipFiles = Get-ChildItem -Path "mythbound-launcher/dist" -Filter "*.7z" -ErrorAction SilentlyContinue
          if ($sevenZipFiles) {
            echo "✅ .7z package files found:"
            $sevenZipFiles | ForEach-Object { echo "  - $($_.Name)" }
          } else {
            echo "❌ No .7z package files found"
          }

          # Check for web installer
          $webSetup = Get-ChildItem -Path "mythbound-launcher/dist" -Filter "*Web Setup*.exe" -ErrorAction SilentlyContinue
          if ($webSetup) {
            echo "✅ Web setup installer found:"
            $webSetup | ForEach-Object { echo "  - $($_.Name)" }
          } else {
            echo "❌ Web setup installer NOT found"
          }

          # Check for blockmap files
          $blockmapFiles = Get-ChildItem -Path "mythbound-launcher/dist" -Filter "*.blockmap" -ErrorAction SilentlyContinue
          if ($blockmapFiles) {
            echo "✅ Blockmap files found:"
            $blockmapFiles | ForEach-Object { echo "  - $($_.Name)" }
          } else {
            echo "❌ No blockmap files found"
          }

      - name: Package Windows Artifacts
        shell: pwsh
        run: |
          # Create artifacts directory
          New-Item -ItemType Directory -Path artifacts/windows -Force

          # CRITICAL: Copy ALL generated files for NSIS-Web

          # Copy web installer
          Copy-Item -Path "mythbound-launcher/dist/*Web Setup*.exe" -Destination "artifacts/windows/" -ErrorAction SilentlyContinue

          # Copy .7z package files (CRITICAL for differential updates)
          Copy-Item -Path "mythbound-launcher/dist/*.7z" -Destination "artifacts/windows/" -ErrorAction SilentlyContinue

          # Copy latest.yml (update manifest)
          Copy-Item -Path "mythbound-launcher/dist/latest.yml" -Destination "artifacts/windows/" -ErrorAction SilentlyContinue

          # Copy blockmap files (for differential updates)
          Copy-Item -Path "mythbound-launcher/dist/*.blockmap" -Destination "artifacts/windows/" -ErrorAction SilentlyContinue

          # Create portable zip from unpacked directory
          $source = "mythbound-launcher/dist/win-unpacked/*"
          $zip    = "artifacts/mythbound-launcher-windows.zip"
          if (Test-Path $zip) { Remove-Item $zip }
          Compress-Archive -Path $source -DestinationPath $zip

          echo "Windows artifacts created:"
          Get-ChildItem -Path "artifacts/windows/" | Format-Table Name, Length

      - name: Upload Windows Full Package
        uses: actions/upload-artifact@v4
        with:
          name: mythbound-launcher-windows-full
          path: artifacts/mythbound-launcher-windows.zip

      - name: Upload Windows Web Installer
        uses: actions/upload-artifact@v4
        with:
          name: mythbound-launcher-windows-web-installer
          path: mythbound-launcher/dist/*Web Setup*.exe

      - name: Upload Windows 7z Packages
        uses: actions/upload-artifact@v4
        with:
          name: mythbound-launcher-windows-7z-packages
          path: mythbound-launcher/dist/*.7z
          if-no-files-found: error

      - name: Upload electron-builder manifest
        uses: actions/upload-artifact@v4
        with:
          name: mythbound-launcher-latest-yml
          path: mythbound-launcher/dist/latest.yml
          if-no-files-found: error

      - name: Upload blockmap files
        uses: actions/upload-artifact@v4
        with:
          name: mythbound-launcher-blockmap-files
          path: mythbound-launcher/dist/*.blockmap
          if-no-files-found: warn

  build-linux:
    name: Build Linux Launcher
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y nodejs npm build-essential fuse libfuse2 libnss3-dev \
            libatk-bridge2.0-dev libdrm2 libxkbcommon-dev libxcomposite-dev \
            libxdamage-dev libxrandr-dev libgbm-dev libxss-dev libasound2-dev

      - name: Install dependencies
        run: |
          cd mythbound-launcher
          npm ci

      - name: Build Linux Launcher
        run: |
          cd mythbound-launcher
          npm run build-linux

      - name: Debug Linux Build Output
        run: |
          echo "Contents of dist directory:"
          ls -la mythbound-launcher/dist/

          echo "Checking for critical files:"
          if [ -f "mythbound-launcher/dist/latest-linux.yml" ]; then
            echo "✅ latest-linux.yml found"
            cat mythbound-launcher/dist/latest-linux.yml
          else
            echo "❌ latest-linux.yml NOT found"
          fi

      - name: Package Linux Artifacts
        run: |
          mkdir -p artifacts/linux
          cp mythbound-launcher/dist/*.AppImage artifacts/linux/ 2>/dev/null || true
          cp mythbound-launcher/dist/*.deb artifacts/linux/ 2>/dev/null || true
          cp mythbound-launcher/dist/latest-linux.yml artifacts/linux/ 2>/dev/null || true
          tar czf artifacts/mythbound-launcher-linux.tar.gz -C artifacts/linux .

          echo "Contents of artifacts/linux:"
          ls -la artifacts/linux/

      - name: Upload Linux Full Package
        uses: actions/upload-artifact@v4
        with:
          name: mythbound-launcher-linux-full
          path: artifacts/mythbound-launcher-linux.tar.gz

      - name: Upload Linux AppImage
        uses: actions/upload-artifact@v4
        with:
          name: mythbound-launcher-linux-appimage
          path: mythbound-launcher/dist/*.AppImage

      - name: Upload Linux Deb Package
        uses: actions/upload-artifact@v4
        with:
          name: mythbound-launcher-linux-deb
          path: mythbound-launcher/dist/*.deb

  release:
    name: Semantic Release
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GHCR_TOKEN_PRIVATE }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Copy Release Config to Root
        run: |
          cp .github/.releaserc ./

      - name: Install Semantic Release
        run: npm install --no-save semantic-release @semantic-release/github @semantic-release/git @semantic-release/release-notes-generator @semantic-release/commit-analyzer

      - name: Download Windows Artifacts
        uses: actions/download-artifact@v4
        with:
          name: mythbound-launcher-windows-full
          path: artifacts/windows

      - name: Download Windows Web Installer
        uses: actions/download-artifact@v4
        with:
          name: mythbound-launcher-windows-web-installer
          path: artifacts/windows-web-installer

      - name: Download Windows 7z Packages
        uses: actions/download-artifact@v4
        with:
          name: mythbound-launcher-windows-7z-packages
          path: artifacts/windows-7z-packages

      - name: Download electron-builder manifest
        uses: actions/download-artifact@v4
        with:
          name: mythbound-launcher-latest-yml
          path: artifacts/windows-manifest

      - name: Download blockmap files
        uses: actions/download-artifact@v4
        with:
          name: mythbound-launcher-blockmap-files
          path: artifacts/windows-blockmap
          continue-on-error: true

      - name: Download Linux Artifacts
        uses: actions/download-artifact@v4
        with:
          name: mythbound-launcher-linux-full
          path: artifacts/linux

      - name: Download Linux AppImage
        uses: actions/download-artifact@v4
        with:
          name: mythbound-launcher-linux-appimage
          path: artifacts/linux-appimage

      - name: Download Linux Deb Package
        uses: actions/download-artifact@v4
        with:
          name: mythbound-launcher-linux-deb
          path: artifacts/linux-deb

      - name: Debug Downloaded Artifacts
        run: |
          echo "=== Windows Web Installer ==="
          ls -la artifacts/windows-web-installer/ || echo "No windows web installer"
          echo "=== Windows 7z Packages ==="
          ls -la artifacts/windows-7z-packages/ || echo "No windows 7z packages"
          echo "=== Windows Manifest ==="
          ls -la artifacts/windows-manifest/ || echo "No windows manifest files"
          if [ -f "artifacts/windows-manifest/latest.yml" ]; then
            echo "Content of latest.yml:"
            cat artifacts/windows-manifest/latest.yml
          fi
          echo "=== Windows Blockmap ==="
          ls -la artifacts/windows-blockmap/ || echo "No windows blockmap files"
          echo "=== Linux AppImage ==="
          ls -la artifacts/linux-appimage/ || echo "No linux appimage files"

      - name: Organize Artifacts for Release
        run: |
          # Create organized structure
          mkdir -p artifacts/release

          # Copy and rename Windows files
          cp artifacts/windows/mythbound-launcher-windows.zip artifacts/release/

          # Handle web installer (NSIS-Web)
          if ls artifacts/windows-web-installer/*Web\ Setup*.exe 1> /dev/null 2>&1; then
            cp artifacts/windows-web-installer/*Web\ Setup*.exe artifacts/release/mythbound-launcher-setup.exe
            echo "✅ Web setup installer found and renamed"
          else
            echo "❌ ERROR: No Windows web setup installer found"
            exit 1
          fi

          # CRITICAL: Handle .7z package files (required for differential updates)
          if ls artifacts/windows-7z-packages/*.7z 1> /dev/null 2>&1; then
            cp artifacts/windows-7z-packages/*.7z artifacts/release/
            echo "✅ .7z package files included for differential updates:"
            ls -la artifacts/windows-7z-packages/*.7z
          else
            echo "❌ ERROR: No .7z package files found - differential updates will not work"
            exit 1
          fi

          # Handle electron-builder generated manifest
          if [ -f "artifacts/windows-manifest/latest.yml" ]; then
            cp artifacts/windows-manifest/latest.yml artifacts/release/
            echo "✅ Using electron-builder generated latest.yml"
            echo "Content:"
            cat artifacts/release/latest.yml
          else
            echo "❌ ERROR: No electron-builder manifest found"
            exit 1
          fi

          # Handle blockmap files for differential updates
          if ls artifacts/windows-blockmap/*.blockmap 1> /dev/null 2>&1; then
            cp artifacts/windows-blockmap/*.blockmap artifacts/release/
            echo "✅ Blockmap files included for differential updates"
          else
            echo "⚠️ No blockmap files found - differential updates may be limited"
          fi

          # Copy and rename Linux files  
          cp artifacts/linux/mythbound-launcher-linux.tar.gz artifacts/release/

          if ls artifacts/linux-appimage/*.AppImage 1> /dev/null 2>&1; then
            cp artifacts/linux-appimage/*.AppImage artifacts/release/mythbound-launcher.AppImage
          else
            echo "WARNING: No Linux AppImage found"
          fi

          if ls artifacts/linux-deb/*.deb 1> /dev/null 2>&1; then
            cp artifacts/linux-deb/*.deb artifacts/release/mythbound-launcher.deb
          else
            echo "WARNING: No Linux deb package found"
          fi

          # List final artifacts
          echo "Final artifacts for release:"
          ls -la artifacts/release/

      - name: Run Semantic Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --no-ci

  publish-to-public:
    name: Publish to Public Repository
    needs: [release]
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GHCR_TOKEN_PRIVATE }}

      - name: Get latest release info
        id: release_info
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the latest release from this repository
          RELEASE_DATA=$(gh release view --repo ${{ github.repository }} --json tagName,name,body,assets)
          TAG_NAME=$(echo "$RELEASE_DATA" | jq -r '.tagName')
          RELEASE_NAME=$(echo "$RELEASE_DATA" | jq -r '.name')

          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "version=${TAG_NAME#v}" >> $GITHUB_OUTPUT

      - name: Download release assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ steps.release_info.outputs.tag_name }}
        run: |
          # Download all assets from the release
          gh release download $TAG --repo ${{ github.repository }}

          echo "Downloaded files:"
          ls -la

      - name: Validate and prepare electron-updater manifest
        env:
          VERSION: ${{ steps.release_info.outputs.version }}
        run: |
          # Check if we have electron-builder generated manifest
          if [ -f "latest.yml" ]; then
            echo "✅ Using electron-builder generated latest.yml"
            
            # Validate that it contains package information for NSIS-Web
            if grep -q "packages:" latest.yml; then
              echo "✅ Manifest contains package information for differential updates"
            else
              echo "⚠️ Manifest does not contain package information - differential updates may not work"
            fi
            
            # Update the manifest for public repository paths
            # Replace the web installer filename to match our public naming
            sed -i 's/Mythbound Launcher Web Setup [0-9.]*\.exe/mythbound-launcher-setup.exe/g' latest.yml
            
            echo "✅ Updated manifest for public repository"
            echo "Final manifest content:"
            cat latest.yml
          else
            echo "❌ ERROR: No electron-builder manifest found"
            exit 1
          fi

          # Generate latest-linux.yml for Linux (if AppImage exists)
          if [ -f "mythbound-launcher.AppImage" ]; then
            cat > latest-linux.yml << EOF
          version: $VERSION
          files:
            - url: mythbound-launcher.AppImage
              sha512: $(sha512sum mythbound-launcher.AppImage | cut -d' ' -f1)
              size: $(stat -c%s mythbound-launcher.AppImage)
          path: mythbound-launcher.AppImage
          sha512: $(sha512sum mythbound-launcher.AppImage | cut -d' ' -f1)
          releaseDate: '$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")'
          EOF
          else
            echo "WARNING: mythbound-launcher.AppImage not found, skipping Linux manifest"
          fi

      - name: Clone public repo and copy manifests
        env:
          GH_TOKEN: ${{ secrets.GHCR_TOKEN_PRIVATE }}
        run: |
          git clone --depth 1 --branch main https://x-access-token:${GH_TOKEN}@github.com/tibia-oce/mythbound-launcher-public.git mythbound-launcher-public

          if [ -f latest.yml ]; then
            cp latest.yml mythbound-launcher-public/latest.yml
          fi

          if [ -f latest-linux.yml ]; then
            cp latest-linux.yml mythbound-launcher-public/latest-linux.yml
          fi

      - name: Commit both manifests to public repo
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          repository: mythbound-launcher-public
          commit_message: "chore: update latest manifest(s) for NSIS-Web differential updates"
          commit_user_name: github-actions[bot]
          commit_user_email: 41898282+github-actions[bot]@users.noreply.github.com
          branch: main

      - name: Create release in public repository
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release_info.outputs.tag_name }}
          name: ${{ steps.release_info.outputs.release_name }}
          body: |
            ## ${{ steps.release_info.outputs.release_name }}

            ### Downloads

            **Windows:**
            - [Setup Installer](https://github.com/tibia-oce/mythbound-launcher-public/releases/download/${{ steps.release_info.outputs.tag_name }}/mythbound-launcher-setup.exe) (Recommended - Auto-Updates with Differential Downloads)

            **Linux:**
            - [AppImage](https://github.com/tibia-oce/mythbound-launcher-public/releases/download/${{ steps.release_info.outputs.tag_name }}/mythbound-launcher.AppImage) (Recommended)
            - [Debian Package](https://github.com/tibia-oce/mythbound-launcher-public/releases/download/${{ steps.release_info.outputs.tag_name }}/mythbound-launcher.deb)

            ### Installation
            - **Windows:** Download and run the setup installer for automatic updates with differential downloads
            - **Linux:** Download AppImage, make executable (`chmod +x`), and run

            ### Auto-Updates
            - **Windows users**: Get automatic silent updates with differential downloads (only changed parts are downloaded)
            - Updates happen seamlessly in the background

            ### Technical Notes
            - This release uses NSIS-Web installer with differential update support
            - Smaller update downloads thanks to .7z package differential updates

            For support, visit our [Discord](https://discord.gg/TT2ebFwEyE).
          files: |
            mythbound-launcher-setup.exe
            mythbound-launcher.AppImage
            mythbound-launcher.deb
            mythbound-launcher-windows.zip
            mythbound-launcher-linux.tar.gz
            latest.yml
            latest-linux.yml
            *.7z
            *.blockmap
          repository: tibia-oce/mythbound-launcher-public
          token: ${{ secrets.GHCR_TOKEN_PRIVATE }}
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
