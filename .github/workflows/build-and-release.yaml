name: Build & Release

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build-windows:
    name: Build Windows Launcher
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: |
          cd mythbound-launcher
          npm ci

      - name: Build Windows Launcher
        run: |
          cd mythbound-launcher
          npm run build-windows

      - name: Debug Windows Build Output
        shell: pwsh
        run: |
          echo "Contents of dist directory:"
          Get-ChildItem -Path "mythbound-launcher/dist" -Recurse | Format-Table Name, Length, LastWriteTime

      - name: Package Windows Artifacts
        shell: pwsh
        run: |
          # Create artifacts directory
          New-Item -ItemType Directory -Path artifacts/windows -Force

          # Copy setup installer (NSIS) - Primary for auto-updates
          Copy-Item -Path "mythbound-launcher/dist/Mythbound Launcher Setup*.exe" -Destination "artifacts/windows/" -ErrorAction SilentlyContinue

          # Copy portable executable (exclude Setup) - For manual distribution
          Copy-Item -Path "mythbound-launcher/dist/Mythbound Launcher *.exe" -Destination "artifacts/windows/" -ErrorAction SilentlyContinue -Exclude "*Setup*"

          # Zip only the contents of win-unpacked - For backup/manual distribution
          $source = "mythbound-launcher/dist/win-unpacked/*"
          $zip    = "artifacts/mythbound-launcher-windows.zip"
          if (Test-Path $zip) { Remove-Item $zip }
          Compress-Archive -Path $source -DestinationPath $zip

          # List zip entries
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::OpenRead($zip).Entries |
            ForEach-Object { Write-Host $_.FullName }

          Write-Host "Created $zip"

      - name: Upload Windows Full Package
        uses: actions/upload-artifact@v4
        with:
          name: mythbound-launcher-windows-full
          path: artifacts/mythbound-launcher-windows.zip

      - name: Upload Windows Setup Installer
        uses: actions/upload-artifact@v4
        with:
          name: mythbound-launcher-windows-setup
          path: mythbound-launcher/dist/Mythbound Launcher Setup*.exe

      - name: Upload Windows Portable
        uses: actions/upload-artifact@v4
        with:
          name: mythbound-launcher-windows-portable
          path: mythbound-launcher/dist/Mythbound Launcher *.exe
          if-no-files-found: warn

  build-linux:
    name: Build Linux Launcher
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y nodejs npm build-essential fuse libfuse2 libnss3-dev \
            libatk-bridge2.0-dev libdrm2 libxkbcommon-dev libxcomposite-dev \
            libxdamage-dev libxrandr-dev libgbm-dev libxss-dev libasound2-dev

      - name: Install dependencies
        run: |
          cd mythbound-launcher
          npm ci

      - name: Build Linux Launcher
        run: |
          cd mythbound-launcher
          npm run build-linux

      - name: Debug Linux Build Output
        run: |
          echo "Contents of dist directory:"
          ls -la mythbound-launcher/dist/

      - name: Package Linux Artifacts
        run: |
          mkdir -p artifacts/linux
          cp mythbound-launcher/dist/*.AppImage artifacts/linux/ 2>/dev/null || true
          cp mythbound-launcher/dist/*.deb artifacts/linux/ 2>/dev/null || true
          cp mythbound-launcher/dist/latest-linux.yml artifacts/linux/ 2>/dev/null || true
          tar czf artifacts/mythbound-launcher-linux.tar.gz -C artifacts/linux .

          echo "Contents of artifacts/linux:"
          ls -la artifacts/linux/

      - name: Upload Linux Full Package
        uses: actions/upload-artifact@v4
        with:
          name: mythbound-launcher-linux-full
          path: artifacts/mythbound-launcher-linux.tar.gz

      - name: Upload Linux AppImage
        uses: actions/upload-artifact@v4
        with:
          name: mythbound-launcher-linux-appimage
          path: mythbound-launcher/dist/*.AppImage

      - name: Upload Linux Deb Package
        uses: actions/upload-artifact@v4
        with:
          name: mythbound-launcher-linux-deb
          path: mythbound-launcher/dist/*.deb

  release:
    name: Semantic Release
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GHCR_TOKEN_PRIVATE }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Copy Release Config to Root
        run: |
          cp .github/.releaserc ./

      - name: Install Semantic Release
        run: npm install --no-save semantic-release @semantic-release/github @semantic-release/git @semantic-release/release-notes-generator @semantic-release/commit-analyzer

      - name: Download Windows Artifacts
        uses: actions/download-artifact@v4
        with:
          name: mythbound-launcher-windows-full
          path: artifacts/windows

      - name: Download Windows Setup Installer
        uses: actions/download-artifact@v4
        with:
          name: mythbound-launcher-windows-setup
          path: artifacts/windows-setup

      - name: Download Windows Portable
        uses: actions/download-artifact@v4
        with:
          name: mythbound-launcher-windows-portable
          path: artifacts/windows-portable
          continue-on-error: true

      - name: Download Linux Artifacts
        uses: actions/download-artifact@v4
        with:
          name: mythbound-launcher-linux-full
          path: artifacts/linux

      - name: Download Linux AppImage
        uses: actions/download-artifact@v4
        with:
          name: mythbound-launcher-linux-appimage
          path: artifacts/linux-appimage

      - name: Download Linux Deb Package
        uses: actions/download-artifact@v4
        with:
          name: mythbound-launcher-linux-deb
          path: artifacts/linux-deb

      - name: Debug Downloaded Artifacts
        run: |
          echo "=== Windows Setup ==="
          ls -la artifacts/windows-setup/ || echo "No windows setup files"
          echo "=== Windows Portable ==="
          ls -la artifacts/windows-portable/ || echo "No windows portable files"
          echo "=== Linux AppImage ==="
          ls -la artifacts/linux-appimage/ || echo "No linux appimage files"

      - name: Organize Artifacts for Release
        run: |
          # Create organized structure
          mkdir -p artifacts/release

          # Copy and rename Windows files
          cp artifacts/windows/mythbound-launcher-windows.zip artifacts/release/

          # Handle setup installer - PRIMARY FOR AUTO-UPDATES
          if ls artifacts/windows-setup/Mythbound\ Launcher\ Setup*.exe 1> /dev/null 2>&1; then
            cp artifacts/windows-setup/Mythbound\ Launcher\ Setup*.exe artifacts/release/mythbound-launcher-setup.exe
            echo "✅ Setup installer found for auto-updates"
          else
            echo "❌ ERROR: No Windows setup installer found - auto-updates will not work!"
            exit 1
          fi

          # Handle portable executable - try different patterns
          if ls artifacts/windows-portable/Mythbound\ Launcher\ *.exe 1> /dev/null 2>&1; then
            # Exclude setup files and copy the first portable exe found
            find artifacts/windows-portable/ -name "Mythbound Launcher *.exe" ! -name "*Setup*" -exec cp {} artifacts/release/mythbound-launcher-portable.exe \; -quit
          else
            echo "WARNING: No Windows portable executable found"
          fi

          # Copy and rename Linux files  
          cp artifacts/linux/mythbound-launcher-linux.tar.gz artifacts/release/

          if ls artifacts/linux-appimage/*.AppImage 1> /dev/null 2>&1; then
            cp artifacts/linux-appimage/*.AppImage artifacts/release/mythbound-launcher.AppImage
          else
            echo "WARNING: No Linux AppImage found"
          fi

          if ls artifacts/linux-deb/*.deb 1> /dev/null 2>&1; then
            cp artifacts/linux-deb/*.deb artifacts/release/mythbound-launcher.deb
          else
            echo "WARNING: No Linux deb package found"
          fi

          # List final artifacts
          echo "Final artifacts for release:"
          ls -la artifacts/release/

      - name: Run Semantic Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --no-ci

  publish-to-public:
    name: Publish to Public Repository
    needs: [release]
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GHCR_TOKEN_PRIVATE }}

      - name: Get latest release info
        id: release_info
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the latest release from this repository
          RELEASE_DATA=$(gh release view --repo ${{ github.repository }} --json tagName,name,body,assets)
          TAG_NAME=$(echo "$RELEASE_DATA" | jq -r '.tagName')
          RELEASE_NAME=$(echo "$RELEASE_DATA" | jq -r '.name')

          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "version=${TAG_NAME#v}" >> $GITHUB_OUTPUT

      - name: Download release assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ steps.release_info.outputs.tag_name }}
        run: |
          # Download all assets from the release
          gh release download $TAG --repo ${{ github.repository }}

          echo "Downloaded files:"
          ls -la

          echo "Looking for specific files:"
          echo "Setup files:"
          ls -la *setup* || echo "No setup files found"
          echo "Portable files:"
          ls -la *portable* || echo "No portable files found"
          echo "All .exe files:"
          ls -la *.exe || echo "No .exe files found"

      - name: Generate electron-updater manifests
        env:
          VERSION: ${{ steps.release_info.outputs.version }}
        run: |
          # Point to NSIS setup installer for auto-updates
          if [ ! -f "mythbound-launcher-setup.exe" ]; then
            echo "ERROR: mythbound-launcher-setup.exe not found!"
            exit 1
          fi

          # Generate latest.yml for Windows - Points to NSIS installer
          cat > latest.yml << EOF
          version: $VERSION
          files:
            - url: mythbound-launcher-setup.exe
              sha512: $(sha512sum mythbound-launcher-setup.exe | cut -d' ' -f1)
              size: $(stat -c%s mythbound-launcher-setup.exe)
          path: mythbound-launcher-setup.exe
          sha512: $(sha512sum mythbound-launcher-setup.exe | cut -d' ' -f1)
          releaseDate: '$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")'
          EOF

          # Generate latest-linux.yml for Linux (if AppImage exists)
          if [ -f "mythbound-launcher.AppImage" ]; then
            cat > latest-linux.yml << EOF
          version: $VERSION
          files:
            - url: mythbound-launcher.AppImage
              sha512: $(sha512sum mythbound-launcher.AppImage | cut -d' ' -f1)
              size: $(stat -c%s mythbound-launcher.AppImage)
          path: mythbound-launcher.AppImage
          sha512: $(sha512sum mythbound-launcher.AppImage | cut -d' ' -f1)
          releaseDate: '$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")'
          EOF
          else
            echo "WARNING: mythbound-launcher.AppImage not found, skipping Linux manifest"
          fi

          echo "Generated manifests:"
          if [ -f "latest.yml" ]; then
            echo "=== Windows manifest (NSIS) ==="
            cat latest.yml
          fi
          if [ -f "latest-linux.yml" ]; then
            echo "=== Linux manifest ==="
            cat latest-linux.yml
          fi

      - name: Clone public repo and copy manifests
        env:
          GH_TOKEN: ${{ secrets.GHCR_TOKEN_PRIVATE }}
        run: |
          git clone --depth 1 --branch main https://x-access-token:${GH_TOKEN}@github.com/tibia-oce/mythbound-launcher-public.git mythbound-launcher-public

          if [ -f latest.yml ]; then
            cp latest.yml mythbound-launcher-public/latest.yml
          fi

          if [ -f latest-linux.yml ]; then
            cp latest-linux.yml mythbound-launcher-public/latest-linux.yml
          fi

      - name: Commit both manifests to public repo
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          repository: mythbound-launcher-public
          commit_message: "chore: update latest manifest(s)"
          commit_user_name: github-actions[bot]
          commit_user_email: 41898282+github-actions[bot]@users.noreply.github.com
          branch: main

      - name: Create release in public repository
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release_info.outputs.tag_name }}
          name: ${{ steps.release_info.outputs.release_name }}
          body: |
            ## ${{ steps.release_info.outputs.release_name }}

            ### Downloads

            **Windows:**
            - [Setup Installer](https://github.com/tibia-oce/mythbound-launcher-public/releases/download/${{ steps.release_info.outputs.tag_name }}/mythbound-launcher-setup.exe) (Recommended - Auto-Updates)
            - [Portable Version](https://github.com/tibia-oce/mythbound-launcher-public/releases/download/${{ steps.release_info.outputs.tag_name }}/mythbound-launcher-portable.exe) (Manual Updates)

            **Linux:**
            - [AppImage](https://github.com/tibia-oce/mythbound-launcher-public/releases/download/${{ steps.release_info.outputs.tag_name }}/mythbound-launcher.AppImage) (Recommended)
            - [Debian Package](https://github.com/tibia-oce/mythbound-launcher-public/releases/download/${{ steps.release_info.outputs.tag_name }}/mythbound-launcher.deb)

            ### Installation
            - **Windows:** Download and run the setup installer for automatic updates
            - **Linux:** Download AppImage, make executable (`chmod +x`), and run

            ### Auto-Updates
            - **Installed users** (setup.exe): Get automatic silent updates
            - **Portable users**: Manual updates required - download new versions

            For support, visit our [Discord](https://discord.gg/TT2ebFwEyE).
          files: |
            mythbound-launcher-setup.exe
            mythbound-launcher-portable.exe
            mythbound-launcher.AppImage
            mythbound-launcher.deb
            mythbound-launcher-windows.zip
            mythbound-launcher-linux.tar.gz
            latest.yml
            latest-linux.yml
          repository: tibia-oce/mythbound-launcher-public
          token: ${{ secrets.GHCR_TOKEN_PRIVATE }}
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
